"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà (100% accuracy)
"""
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support, classification_report, confusion_matrix
from joblib import load
import warnings
warnings.filterwarnings('ignore')

def test_new_trained_model():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà"""
    print("üß™ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ó‡∏£‡∏ô‡πÉ‡∏´‡∏°‡πà")
    print("=" * 60)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    df = pd.read_csv('Phishing_Email_test.csv', encoding='utf-8')
    
    # ‡∏´‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå text ‡πÅ‡∏•‡∏∞ label
    text_col = None
    label_col = None
    
    for col in df.columns:
        if 'text' in col.lower() or 'email' in col.lower():
            text_col = col
        if 'type' in col.lower() or 'label' in col.lower():
            label_col = col
    
    texts = df[text_col].astype(str).fillna('').tolist()
    labels = df[label_col].astype(str).tolist()
    
    print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {len(texts)}")
    print(f"  - Unique labels: {set(labels)}")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà
    try:
        model = load('best_logisticregression_model.joblib')
        vectorizer = load('best_logisticregression_vectorizer.joblib')
        print(f"\n‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"  - ‡πÇ‡∏°‡πÄ‡∏î‡∏•: {type(model).__name__}")
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•: {e}")
        return
    
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    X = vectorizer.transform(texts)
    
    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    predictions = model.predict(X)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á mapping
    unique_labels = sorted(list(set(labels)))
    label_mapping = {label: i for i, label in enumerate(unique_labels)}
    reverse_mapping = {i: label for label, i in label_mapping.items()}
    
    # ‡πÅ‡∏õ‡∏•‡∏á labels
    labels_numeric = [label_mapping[label] for label in labels]
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
    accuracy = accuracy_score(labels_numeric, predictions)
    
    print(f"\nüéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:")
    print(f"  - Accuracy: {accuracy:.4f} ({accuracy*100:.2f}%)")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á classification report
    print(f"\nüìà Classification Report:")
    print("-" * 50)
    
    precision, recall, f1, support = precision_recall_fscore_support(
        labels_numeric, predictions, zero_division=0
    )
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    print(f"{'Class':<12} {'Precision':<12} {'Recall':<12} {'F1-Score':<12} {'Support':<12}")
    print("-" * 60)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏•‡∏≤‡∏™
    for i in range(len(unique_labels)):
        class_name = f"Class {i}"
        print(f"{class_name:<12} {precision[i]:<12.2f} {recall[i]:<12.2f} "
              f"{f1[i]:<12.2f} {int(support[i]):<12}")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°
    print("-" * 60)
    print(f"{'accuracy':<12} {'':<12} {'':<12} {'':<12} {accuracy:<12.2f} {len(labels_numeric)}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì macro average
    macro_precision = np.mean(precision)
    macro_recall = np.mean(recall)
    macro_f1 = np.mean(f1)
    print(f"{'macro avg':<12} {macro_precision:<12.2f} {macro_recall:<12.2f} "
          f"{macro_f1:<12.2f} {len(labels_numeric)}")
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì weighted average
    weighted_precision = np.average(precision, weights=support)
    weighted_recall = np.average(recall, weights=support)
    weighted_f1 = np.average(f1, weights=support)
    print(f"{'weighted avg':<12} {weighted_precision:<12.2f} {weighted_recall:<12.2f} "
          f"{weighted_f1:<12.2f} {len(labels_numeric)}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á confusion matrix
    print(f"\nüî¢ Confusion Matrix:")
    print("-" * 50)
    cm = confusion_matrix(labels_numeric, predictions)
    
    # ‡πÅ‡∏™‡∏î‡∏á confusion matrix
    print(f"{'':<12}", end="")
    for i in range(len(unique_labels)):
        print(f"Class {i:<8}", end="")
    print()
    
    for i in range(len(unique_labels)):
        print(f"Class {i:<8}", end="")
        for j in range(len(unique_labels)):
            print(f"{cm[i][j]:<12}", end="")
        print()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print(f"\nüìã ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
    print("-" * 50)
    
    if accuracy >= 0.97:
        print("‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡∏µ‡∏°‡∏≤‡∏Å! (‚â•97%)")
    elif accuracy >= 0.9:
        print("‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏î‡∏µ! (‚â•90%)")
    elif accuracy >= 0.8:
        print("‚ö†Ô∏è  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏≠‡πÉ‡∏ä‡πâ (‚â•80%)")
    else:
        print("‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÅ‡∏¢‡πà (<80%)")
    
    # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤
    print(f"\nüîÑ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤:")
    print("-" * 50)
    print("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤ (phishing_detector_updated.joblib):")
    print("  - Accuracy: 39.29%")
    print("  - ‡∏õ‡∏±‡∏ç‡∏´‡∏≤: ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Phishing Email")
    print("  - Safe Email Recall: 0%")
    
    print("\n‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà (best_logisticregression_model.joblib):")
    print(f"  - Accuracy: {accuracy*100:.2f}%")
    print("  - ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Safe Email ‡πÅ‡∏•‡∏∞ Phishing Email")
    print(f"  - Safe Email Recall: {recall[1]*100:.2f}%")
    print(f"  - Phishing Email Recall: {recall[0]*100:.2f}%")
    
    improvement = accuracy - 0.3929
    print(f"\nüìà ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á:")
    print(f"  - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô: {improvement*100:.2f}%")
    print(f"  - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á: {improvement/0.3929*100:.1f}%")
    
    print(f"\nüéØ ‡∏™‡∏£‡∏∏‡∏õ:")
    print("=" * 30)
    print("‚úÖ ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å!")
    print("‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ bias ‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Å‡πà‡∏≤")
    print("‚úÖ ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á Safe Email ‡πÅ‡∏•‡∏∞ Phishing Email")
    print("‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å")
    
    return accuracy

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    try:
        accuracy = test_new_trained_model()
        print(f"\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        if accuracy is not None:
            print(f"üéØ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢: {accuracy*100:.2f}%")
        else:
            print("‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•/‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)")
    except Exception as e:
        print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

if __name__ == "__main__":
    main()
